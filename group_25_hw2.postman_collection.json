{
	"info": {
		"_postman_id": "6e528706-0779-4a16-8a4f-c7f0b5edf3a0",
		"name": "group_25_hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос, статус код 200.",
							"pm.test('Check Status', () => {",
							"    if(pm.response.code === 200) {",
							"        console.log(\"Status code is 200.\")",
							"    }",
							"})",
							"// 2. Проверить, чтоб в body приходит правильный String. ",
							"pm.test('Body contains a string', () => {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"    console.log(\"Body has correct string.\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос, статус код 200.",
							"pm.test('Check Status', () => {",
							"    if(pm.response.code === 200) {",
							"        console.log(\"Status code is 200.\")",
							"    }",
							"})",
							"// 2. Спарсить response body в JSON. ",
							"let resp_data = pm.response.json()",
							"// Выводим response body в консоль, просто для себя. ",
							"console.log(pm.response.json());",
							"// 3. Проверить, что name в ответе = name c request (name вводим руками).",
							"pm.test('Name response = name request manual', () => {",
							"    pm.expect(pm.response.json().name).to.eql(\"Pavel\");",
							"    console.log(pm.response.json().name + \" = \" + \"Pavel manual\");",
							"})",
							"// 4. Проверить, что age в ответе = age с request (age вводим руками).",
							"pm.test('Name response = name request manual', () => {",
							"    pm.expect(pm.response.json().age).to.eql(\"29\");",
							"    console.log(pm.response.json().name + \" = \" + \"29 manual\");",
							"})",
							"// 5. Проверить, что salary в ответе = salary с request (salary вводим руками).",
							"pm.test('Name response = name request manual', () => {",
							"    pm.expect(pm.response.json().salary).to.eql(parseInt(\"1000\"));",
							"    console.log(pm.response.json().salary + \" = \" + \"1000 manual\");",
							"})",
							"// 6. Спарсить request.",
							"let req_data = request.data;",
							"// 7. Проверить, что name в ответe = name c request (name забрать из request).",
							"pm.test('Name response = name request', () => {",
							"    pm.expect(pm.response.json().name).to.eql(request.data.name);",
							"    console.log(pm.response.json().name + \" = \" + request.data.name + \" data\");",
							"})",
							"// 8. Проверить, что age в ответe = age c request (age забрать из request).",
							"pm.test('Age response = age request', () => {",
							"    pm.expect(pm.response.json().age).to.eql(request.data.age);",
							"    console.log(pm.response.json().age + \" = \" + request.data.age + \" data\");",
							"})",
							"// 9. Проверить, что salary в ответе = salary c request (salary забрать из request).",
							"pm.test('Salary response = salary request', () => {",
							"    pm.expect(pm.response.json().salary).to.eql(parseInt(request.data.salary));",
							"    console.log(pm.response.json().salary + \" = \" + request.data.salary + \" data\");",
							"})",
							"// 10. Вывести в консоль параметр family из response.",
							"console.log(resp_data.family);",
							"// 11. Проверить, что u_salary_1_5_year в ответе = salary*4(salary забрать из request).",
							"pm.test('Salary 1.5 year = salary * 4 from request', () => {",
							"    pm.expect(pm.response.json().family.u_salary_1_5_year).to.eql+(request.data.salary*4);",
							"    console.log(pm.response.json().family.u_salary_1_5_year + \" = \" + request.data.salary + \" * 4 = 4000\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object Info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос, статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Спарсить response body в JSON. ",
							"let resp_data = pm.response.json()",
							"// Выводим response body в консоль, просто для себя. ",
							"console.log(pm.response.json());",
							"// 3. Спарсить request.",
							"let req_data = pm.request.url.query.toObject();",
							"// 4. Проверить, что name в ответе = name с request (name забрать из request).",
							"pm.test('Name response = Name url request', function () {",
							"    pm.expect(pm.response.json().name).to.be.eql(pm.request.url.query.toObject().name);",
							"    console.log(pm.response.json().name + \" = \" + pm.request.url.query.toObject().name + \" from url request\");",
							"});",
							"// 5. Проверить, что age в ответе = age с request (age забрать из request).",
							"pm.test('Age response = Age url request', function () {",
							"    pm.expect(pm.response.json().age).to.be.eql(pm.request.url.query.toObject().age);",
							"    console.log(pm.response.json().age + \" = \" + pm.request.url.query.toObject().age + \" from url request\");",
							"});",
							"// 6. Проверить, что salary в ответе = salary с request (salary забрать из request).",
							"pm.test('Salary response = Salary url request', function () {",
							"    pm.expect(pm.response.json().salary).to.be.eql(parseInt(pm.request.url.query.toObject().salary));",
							"    console.log(pm.response.json().salary + \" = \" + pm.request.url.query.toObject().salary + \" from url request\");",
							"});",
							"// 7. Вывести в консоль параметр family из response. ",
							"console.log(pm.response.json().family);",
							"// 8. Проверить, что у параметра dog есть параметры name.",
							"pm.test('Dog has name properties', function () {",
							"    pm.expect(pm.response.json().family.pets.dog).to.have.a.property(\"name\");",
							"    console.log(pm.response.json().family.pets.dog.name + \" has property name\");",
							"})",
							"// 9. Проверить, что у параметра dog есть параметры age.",
							"pm.test('Dog has name properties', function () {",
							"    pm.expect(pm.response.json().family.pets.dog).to.have.a.property(\"age\");",
							"    console.log(pm.response.json().family.pets.dog.name + \", age = \" + pm.response.json().family.pets.dog.age + \" has property age\");",
							"})",
							"// 10. Проверить, что параметр name имеет значение Luky.",
							"pm.test('Name has Luky parameter', function () {",
							"    pm.expect(pm.response.json().family.pets.dog.name).to.be.eql(\"Luky\");",
							"    console.log(\"Luky = Luky\");",
							"})",
							"// 11. Проверить, что параметр age имеет значение 4.",
							"pm.test('Age has 4 parameter', function () {",
							"    pm.expect(pm.response.json().family.pets.dog.age).to.be.eql(4);",
							"    console.log(\"Age = Age\");",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Pavel&age=29&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}